--Original aviahorizon by Melvin on official forum !!! Under NDA  https://board.dualthegame.com/index.php?/topic/17482-lua-basic-artificial-horizon/&tab=comments#comment-118639
--You need set [Gyroscope] [Telemeter] and link to [Command seat controller] and named slots [gyro] [telemeter] 
--***********************************************unit.start********************************************

self.setTimer("vSpeed",1)

artificialHorizon = {}
local screen = screen --export
local gyro = gyro --export
local telemeter = telemeter --export
local systemScreen = true --export
local debug = false --export
local concat = table.concat
local insert = table.insert

local function getPitch()
    local self = {}
    self.pitch = gyro.getPitch()
    self.showPitch = 0
    if self.pitch >= 90 then
        self.showPitch = self.pitch / 6
    else
        self.showPitch = self.pitch / 3
    end
    return self.showPitch
end

local function telemeterDistanceToDegree()
    local self = {}
    self.maxDistance    =   telemeter.getMaxDistance()
    self.distance       =   telemeter.getDistance()
    self.dmax           =   (self.maxDistance / 90) * (360 / math.pi)
    self.degrees        =   (-360 / math.pi) * (self.distance / self.dmax)
    return self.degrees
end

local function generateHtml(roll, compass, color, telemeterDistance, pitch, speed, distance, altitude, vertSpeed)
    local buffer = {}
    local svg = [[
              <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 517.35 422.63">
            <style>.J{fill:none}.K{fill:]] .. color .. [[}.L{stroke:]] .. color .. [[}.M{stroke-miterlimit:10}.N{stroke-width:3}.S{font-size:150%}></style>
        <defs>
        <clipPath id="A">
            <path d="M230.94 128l13.6-44.67h30.33l13.6 44.67h-57.53z" class="J"/>
            </clipPath>
            <path id="B"
        d="M220.53 211.1c0 4-1.62 6.78-4.94 6.78s-4.84-3-4.86-6.7 1.6-6.74 5-6.74 4.8 3.1 4.8 6.66zm-6.74.08c0 3 .7 4.4 1.88 4.4s1.82-1.48 1.82-4.44-.62-4.4-1.84-4.4-1.88 1.42-1.86 4.44z"/>
                </defs>
                <path d="M250.92 421v-7.5l-.07 1.36-.25 6.13h-.15A210 210 0 0 1 50.74 221.5l15-.7c4.78 100.8 84.5 180.44 185.45 185.26h.17l-.42 7.4zm-.08-6.25v.1l.07-1.35zm19.7 6.25l-.7-15c100.85-4.73 180.54-84.46 185.36-185.45v-.38l14.98.64v.4A210 210 0 0 1 270.53 421zM65.72 202.25l-7.5-.38h-7.5v-.53A210 210 0 0 1 250.17 1.6l.72 15C150.14 21.4 70.54 101.13 65.73 202zm389.47-.6C450.3 101 370.6 21.4 269.75 16.6h-.3l.35-15h.64a210 210 0 0 1 199.74 199.33z"
        opacity=".1" class="K"/>
            <path d="M49.14 211.32h30m362.63 0h30m-211.3 211.3v-30m0-362.63V0" stroke-width="2" class="J L M"/>
            <path d="M117.84 341.5l17.1-4.64-4.64 17.1-12.45-12.45zM403.08 81.15L386 85.78l4.64-17.1 12.45 12.46zm-12.45 272.8l-4.64-17.1 17.1 4.64-12.45 12.45zM130.3 68.7l4.64 17.1-17.1-4.63L130.3 68.7z"
        class="K"/>
            
            <g id="compass" style="transform-origin:center center; transform:rotate(]] .. compass .. [[deg);" class="K">
                <g style="transform-origin:center center; transform:rotate(360deg);">
                    <path d="M410.68 221l-24.3 5.6v-5.86l10-1.78 8.47-1.4v-.07l-8.52-1.64-9.92-2.1v-5.83l10.24-1.88 8.14-1.25v-.07l-8.4-1.45-9.93-2v-5.58l24.22 6.4v5.93l-10.46 2-7.5 1.1v.07l7.48 1.45 10.5 2.33zm-289.02-17v8.92h5.76l.06-10h4.5l-.1 15.48-24.27-.14.1-15h4.5v9.47h5v-8.93zM250.9 362.42l.14-24.26h6.4l5 8.92a68.12 68.12 0 0 1 3.91 8.34h.1a90.66 90.66 0 0 1-.41-10.12v-7.1h5l-.06 24.33h-5.76l-5.13-9.4a91 91 0 0 1-4.16-8.59h-.1c.13 3.2.18 6.63.16 10.58v7.3zm3.2-285.52a13.85 13.85 0 0 0 6.08 1.55c2.5 0 3.85-1 3.86-2.6s-1.14-2.4-4.05-3.45c-4-1.42-6.63-3.67-6.6-7.2 0-4.14 3.5-7.28 9.22-7.25a14.81 14.81 0 0 1 6.18 1.26l-1.25 4.42a11.51 11.51 0 0 0-5.06-1.18c-2.38 0-3.54 1.06-3.55 2.32 0 1.54 1.36 2.24 4.48 3.44 4.28 1.6 6.28 3.86 6.26 7.27 0 4.07-3.18 7.5-9.83 7.47a15.81 15.81 0 0 1-6.83-1.52zm59.764-16.542l4.8-13.152 2.818 1.03-4.8 13.152zM286.6 53.33l2.4-13.8 2.955.516-2.4 13.8zM259.05 37.2h3v14h-3zm-29.684 2.83l2.956-.5 2.383 13.796-2.956.5zm-28.682 7.765l2.828-1.002 4.678 13.195L205.362 61zm-27.04 12.542l2.616-1.468 6.85 12.2-2.616 1.468zm-24.72 17.143l2.324-1.898 8.856 10.843-2.324 1.898zm-21.705 21.595l1.954-2.277 10.625 9.116-1.954 2.277zm-18.042 25.785l1.515-2.6 12.083 7.072-1.515 2.6zm-13.167 28.57l1.03-2.818 13.152 4.8-1.03 2.818zm-7.662 29.616l.516-2.955 13.8 2.4-.516 2.955zM86.02 210.06h14v3h-14zm2.286 29.74l13.796-2.383.5 2.956-13.796 2.383zm7.29 28.795l13.195-4.678 1.002 2.828-13.195 4.678zm12.08 27.25l12.2-6.85 1.468 2.616-12.2 6.85zM124.4 320.84l10.843-8.856 1.898 2.324-10.843 8.856zm21.2 22.08l9.115-10.627 2.277 1.953-9.115 10.627zm25.467 18.506l7.072-12.083 2.6 1.515-7.072 12.083zm28.355 13.624l4.8-13.152 2.818 1.03-4.8 13.152zm29.485 8.156l2.4-13.8 2.955.516-2.4 13.8zM258.87 372.1h3v14h-3zm27.33-2.098l2.956-.5 2.383 13.796-2.956.5zm26.52-6.678l2.828-1.002 4.678 13.195-2.828 1.002zm25.083-11.104l2.616-1.468 6.85 12.2-2.616 1.468zm23-15.385l2.324-1.898 8.856 10.843-2.324 1.898zm20.207-20.19l1.95-2.28 10.64 9.1-1.95 2.28zm17.13-22.66l1.515-2.6 12.083 7.072-1.515 2.6zm12.576-26.09l1.03-2.818 13.152 4.8-1.03 2.818zM418.22 240.75l.516-2.955 13.8 2.4-.516 2.955zm2.68-30.5h14v3h-14zm-2.614-27.284l13.796-2.383.5 2.956-13.796 2.383zm-7.16-26.398l13.195-4.678 1.002 2.828-13.195 4.678zm-11.565-24.88l12.2-6.85 1.468 2.616-12.2 6.85zm-15.797-22.72l10.843-8.856 1.898 2.324-10.843 8.856zM363.95 89.04l9.116-10.625 2.277 1.954-9.116 10.625zM341.638 73.8l7.14-12.04 2.58 1.53-7.14 12.04zM330.83 59.723l2.978-6.335 1.357.638-2.978 6.335zm-13.847-5.703l2.4-6.576 1.4.514-2.4 6.576zm-14.123-4.38l1.807-6.763 1.45.387-1.807 6.763zm-14.263-3.078l1.206-6.895 1.478.258-1.206 6.895zm-14.4-1.8l.6-6.974 1.494.13-.6 6.974zM259.8 37.2h1.5v7h-1.5zm-14.926.7l1.494-.13.602 6.974-1.494.13zM230.1 39.883l1.478-.255 1.2 6.898-1.478.255zm-14.527 3.204l1.45-.38 1.772 6.772-1.45.38zm-14.2 4.45l1.414-.5 2.34 6.598-1.414.5zm-13.786 5.625l1.366-.62 2.892 6.375-1.366.62zm-13.303 6.813l1.308-.734 3.426 6.104-1.308.734zm-12.718 7.957l1.24-.844 3.94 5.787-1.24.844zm-12.078 9.062l1.162-.95 4.428 5.422-1.162.95zm-11.314 10.217l1.074-1.047 4.887 5.012-1.074 1.047zm-10.49 11.28l.977-1.138 5.313 4.558-.977 1.138zm-9.58 12.312l.87-1.22 5.7 4.064-.87 1.22zm-8.567 13.395l.758-1.295 6.04 3.536-.758 1.295zm-7.352 14.07l.638-1.357 6.335 2.978-.638 1.357zm-5.94 14.453l.514-1.4 6.576 2.4-.514 1.4zm-4.57 14.714l.387-1.45 6.763 1.807-.387 1.45zm-3.208 14.9l.258-1.478 6.895 1.206-.258 1.478zm-1.893 14.965l.13-1.494 6.974.6-.13 1.494zM86 210.8h7v1.5h-7zm.603 14.93l6.974-.602.13 1.494-6.974.602zm1.82 14.794l6.898-1.2.255 1.478-6.898 1.2zm2.55 15.48l6.8-1.75.375 1.455-6.8 1.75zM95.84 269.3l6.598-2.34.5 1.414-6.598 2.34zm5.525 13.827l6.375-2.892.62 1.366-6.375 2.892zm6.675 13.368l6.104-3.426.734 1.308-6.104 3.426zm7.827 12.815l5.787-3.94.844 1.24-5.787 3.94zm8.995 12.116l5.422-4.428.95 1.162-5.422 4.428zm10.092 11.434l5.012-4.887 1.047 1.074-5.012 4.887zm11.386 10.038l4.55-5.32 1.14.975-4.55 5.32zm12.073 10.18l4.064-5.7 1.22.87-4.064 5.7zm13.287 8.733l3.536-6.04 1.295.758-3.536 6.04zm14.038 7.432l2.978-6.335 1.357.638-2.978 6.335zm14.387 6.086l2.4-6.576 1.4.514-2.4 6.576zm14.672 4.707l1.807-6.763 1.45.387-1.807 6.763zm14.873 3.36l1.206-6.895 1.478.258-1.206 6.895zm14.945 1.982l.6-6.974 1.494.13-.6 6.974zm15.005-6.288h1.5v7h-1.5zm14.35-.578l1.494-.13.602 6.974-1.494.13zm14.156-1.74l1.478-.255 1.2 6.898-1.478.255zm13.602-1.07l1.455-.375 1.75 6.8-1.455.375zm14.047-6.034l1.414-.5 2.34 6.598-1.414.5zm13.3-5.318l1.366-.62 2.892 6.375-1.366.62zm12.81-6.368l1.308-.734 3.426 6.104-1.308.734zm12.28-7.512l1.24-.844 3.94 5.787-1.24.844zm11.65-8.677l1.162-.95 4.428 5.422-1.162.95zm10.952-9.653l1.074-1.047 4.887 5.012-1.074 1.047zm10.172-10.733l.977-1.138 5.313 4.558-.977 1.138zm9.273-11.817l.87-1.22 5.7 4.064-.87 1.22zm8.363-12.728l.758-1.295 6.04 3.536-.758 1.295zm7.155-13.5l.638-1.357 6.335 2.978-.638 1.357zm5.84-13.793l.514-1.4 6.576 2.4-.514 1.4zM422.08 255.5l.387-1.45 6.763 1.807-.387 1.45zm3.24-14.236l.258-1.478 6.895 1.206-.258 1.478zm1.88-14.4l.13-1.494 6.974.6-.13 1.494zm.7-15.874h7v1.5h-7zm-.683-14.3l6.974-.6.13 1.494-6.974.6zm-1.895-14.18l6.898-1.2.255 1.478-6.898 1.2zm-2.532-12.207l6.8-1.75.375 1.455-6.8 1.75zm-4.8-15.396l6.598-2.34.5 1.414-6.598 2.34zm-5.4-13.27l6.375-2.892.62 1.366-6.375 2.892zm-7.286-13.25l6.1-3.43.735 1.305-6.1 3.43zm-6.87-11.67l5.787-3.94.844 1.24-5.787 3.94zm-8.745-11.61l5.422-4.428.95 1.162-5.422 4.428zm-9.767-10.843l5.012-4.887 1.047 1.074-5.012 4.887zm-10.823-10.06l4.558-5.313 1.138.977-4.558 5.313zm-11.872-9.227l4.064-5.7 1.22.87-4.064 5.7zm-12.832-8.205l3.536-6.04 1.295.758-3.536 6.04z">
                </g>
            </g>
            <g class="J L M N">
            <path d="M236.32 182.48h48.28m-48.28 57.68h48.28"/>
            <path d="M216 162.87v-8.64h88.92v8.64m0 96.9v8.64H216v-8.64"/>
            </g>
            <g class="K">
            <use xlink:href="#B"/>
            <use xlink:href="#B" x="89.64"/>
            <path d="M193.8 152.57l-2.48 1.18-.5-2.28 3.44-1.6h2.52v13h-2.94z"/>
            <use xlink:href="#B" x="-11.93" y="-54.8"/>
            <path d="M314.5 152.57l-2.5 1.18-.5-2.28 3.44-1.6h2.52v13h-2.94zm14.8 3.73c0 4-1.62 6.78-4.94 6.78s-4.84-3-4.87-6.7 1.6-6.74 5-6.74 4.8 3.1 4.8 6.66zm-6.74.08c0 3 .7 4.4 1.88 4.4s1.82-1.48 1.82-4.44-.62-4.4-1.84-4.4-1.88 1.42-1.86 4.44zm3.74 113.78l2.5-1.16.5 2.28-3.44 1.6h-2.53v-13h3zm-14.84-3.74c0-4 1.62-6.78 5-6.78s4.84 3 4.86 6.7-1.6 6.74-5 6.74-4.86-3.08-4.86-6.66zm6.74-.08c0-3-.7-4.4-1.87-4.4s-1.83 1.48-1.83 4.44.62 4.4 1.85 4.4 1.88-1.42 1.85-4.44zm-112.6 3.82l2.48-1.18.5 2.28-3.44 1.6h-2.53v-13h3zm-14.84-3.74c0-4 1.63-6.78 5-6.78s4.84 3 4.86 6.7-1.6 6.74-5 6.74-4.86-3.08-4.86-6.66zm6.75-.08c0-3-.7-4.4-1.88-4.4s-1.82 1.48-1.82 4.44.62 4.4 1.84 4.4 1.88-1.42 1.86-4.44zm-12.03 19.46l-1.73-1.5-9 9.9 1.94 1.67zm6.1 21.2l-2.16-1.38 3.72-5.55 2 1.3zm16.32 8.83l-2.33-1.06 5.72-12.08 2.1.95zm17.44 6.34l-2.46-.73 1.95-6.4 2.32.7zm18.17 3.73l-2.53-.38 2-13.22 2.26.35zm18.52 1h-2.56v-6.68h2.43zm18.48-1.7l-2.53.42-1.9-13.22 2.26-.38zm18-4.34l-2.45.76-1.9-6.4 2.32-.73zm17.2-6.94l-2.32 1.1-5.65-12.1 2.07-1zm30.47-21l-1.92 1.7-8.9-9.95 1.72-1.52zm-14.46 11.62l-2.1 1.45-3.68-5.58 2-1.33z"/>
            </g>
            <g class="J L M" style="transform: rotate(45deg);transform-origin: center center;">
                <path style="transform: rotate(-45deg);transform-origin: center center;" d="M182.93 285.4A114.65 114.65 0 0 0 338 284.25" class="N"/>
                <path id="height-o-meter" style="transform-origin:center; transform:rotate(]] .. telemeterDistance .. [[deg);" d="M269.26 293.32l-8.8 15.36-8.8-15.36h17.6z" stroke-width="5"/>
            </g>
            <g clip-path="url(#A)" class="K">
            <path d="M287.85 125.97h-56.3l-.62 2.03h57.53l-.62-2.03m-4.94-16.3h-46.37l-.42 1.38h47.2l-.42-1.38m-3.47-11.4H240l-.3 1h40.03l-.3-1m-2.58-8.44h-34.28l-.23.75h34.73l-.22-.75m-1.98-6.5h-30.33l-.18.6h30.7l-.18-.6"/>
            </g>
            			
    	  <path style="transform-origin:center center; transform:rotate(]] .. roll .. [[deg);" id="horizon-line-roll" d="M0 210.93h517.35" stroke-width="2" class="J L M"/>	
            <g id="pitch" style="transform-origin: center center; transform:translate(0vw,]] .. pitch .. [[vh);" class="J L N">
                <circle cx="260.46" cy="211.32" r="14.29" transform="matrix(.98232 -.18721 .18721 .98232 -34.96 52.51)"/>
                <path d="M225.06 211.32h21.1m28.54 0h21.1m-35.36 35.38v-21.1" class="M"/>
            </g>
    	<text x="480" y="240" class="K S">]] .. vertSpeed .. [[</text>
    	 <text x="251" y="290" class="K S">]] .. distance .. [[</text>
           <text x="10" y="200" class="K S">]] .. speed .. [[</text>
    	  <text x="480" y="200" class="K S">]] .. altitude .. [[</text>
    	  
            </svg>
    ]]
    insert(buffer, svg)
    return concat(buffer)
end

local function updateScreen()
    local self = {}
    self.defaultColor = "#cecece"
    if btnDN.getState() == 1 then 
    	self.defaultColor = "#000033" 
    else 
    	self.defaultColor = "#cecece"
    end
    if debug == true then
        system.print("Debug:")
    end
    gyro.setYawWorldReference({0, 0, -1})
    local yaw = gyro.getYaw()
    if vertSpeed == nil then vertSpeed = 0 end
    local distance = 0
    local speed = math.floor(vec3(core.getWorldVelocity()):len() * 3.6 + 0.5)
    local altitude = math.ceil(core.getAltitude())
    if distance > 100 then distance = altitude else distance = math.ceil(telemeter.getDistance()) end
    local html = generateHtml(gyro.getRoll(), -yaw, self.defaultColor, telemeterDistanceToDegree(), getPitch(), speed, distance, altitude, vertSpeed)
    if systemScreen == true then
        local modifiedHtml = [[
            <style>
                .svgWrapper svg {
                   max-height:30vh;
                }
                .svgWrapper{
                    background-color:rgba(0,0,0,0);
                    position:absolute;
                    bottom:1vh;
                    left:-1vh;
                }
            </style>
            <div class='grid'>
                <div class='svgWrapper'>
                    ]] .. html .. [[
                </div>
            </div>
        ]]
        system.setScreen(modifiedHtml)
    else
        screen.setSVG(html)
    end
end

function artificialHorizon:onStart()
    screen.activate()
end

function artificialHorizon:onUpdate()
    updateScreen()
end

if systemScreen == true then
    system.showScreen(1)
else
    artificialHorizon:onStart()
end

--***********************************************system.update********************************************
 
artificialHorizon:onUpdate()

--***********************************************tick.vSpeed********************************************
--Celculate vertical speed

altBefore = math.ceil(core.getAltitude())
vertSpeed = altBefore - altAfter
altAfter = altBefore
