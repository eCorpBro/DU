--Original aviahorizon by Melvin on official forum !!! Under NDA  https://board.dualthegame.com/index.php?/topic/17482-lua-basic-artificial-horizon/&tab=comments#comment-118639
--You need set [Gyroscope] [Telemeter] and link to [Command seat controller] and named slots [gyro] [telemeter] 
--***********************************************unit.start********************************************

--********************************************unit.start*************************
-- category panel display helpers
_autoconf = {}
_autoconf.panels = {}
_autoconf.panels_size = 0
_autoconf.displayCategoryPanel = function(elements, size, title, type, widgetPerData)
    widgetPerData = widgetPerData or false -- default to one widget for all data
    if size > 0 then
        local panel = system.createWidgetPanel(title)
        local widget
        if not widgetPerData then
            widget = system.createWidget(panel, type)
        end
        for i = 1, size do
            if widgetPerData then
                widget = system.createWidget(panel, type)
            end
            system.addDataToWidget(elements[i].getDataId(), widget)
        end
        _autoconf.panels_size = _autoconf.panels_size + 1
        _autoconf.panels[_autoconf.panels_size] = panel
    end
end
_autoconf.hideCategoryPanels = function()
    for i=1,_autoconf.panels_size do
        system.destroyWidgetPanel(_autoconf.panels[i])
    end
end
-- Proxy array to access auto-plugged slots programmatically

spacefueltank = {}
spacefueltank_size = 0

atmofueltank = {}
atmofueltank[1] = atmofueltank_1
atmofueltank_size = 1

rocketfueltank = {}
rocketfueltank_size = 0

weapon = {}
weapon_size = 0

radar = {}
radar_size = 0
-- End of auto-generated code
Nav = Navigator.new(system, core, unit)
Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
Nav.axisCommandManager:setTargetGroundAltitude(4)

-- element widgets
-- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
_autoconf.displayCategoryPanel(weapon, weapon_size, "Weapons", "weapon", true)
core.show()
_autoconf.displayCategoryPanel(radar, radar_size, "Periscope", "periscope")
placeRadar = true
if atmofueltank_size > 0 then
    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, "Atmo Fuel", "fuel_container")
    if placeRadar then
        _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
        placeRadar = false
    end
end
if spacefueltank_size > 0 then
    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, "Space Fuel", "fuel_container")
    if placeRadar then
        _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
        placeRadar = false
    end
end
_autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, "Rocket Fuel", "fuel_container")
if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
    _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
    placeRadar = false
end
if antigrav ~= nil then antigrav.show() end
if warpdrive ~= nil then warpdrive.show() end
if gyro ~= nil then gyro.show() end


-- freeze the player in he is remote controlling the construct
if Nav.control.isRemoteControlled() == 1 then
    system.freeze(1)
end

-- landing gear
-- make sure every gears are synchonized with the first
gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
if gearExtended then
    Nav.control.extendLandingGears()
else
    Nav.control.retractLandingGears()
end


core.hide()
gyro.hide()

panel = system.createWidgetPanel("SMC")
widgetValue = system.createWidget(panel, "value")

altAfter = 0
--***********************************************system.update********************************************
 
artificialHorizon:onUpdate()

--***********************************************tick.second********************************************
--Calculate vertical speed
altBefore = math.ceil(core.getAltitude())
vertSpeed = altBefore - altAfter
altAfter = altBefore
